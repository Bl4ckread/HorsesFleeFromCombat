using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Noggog;

namespace HorsesFleeFromCombat
{
    public class Program
    {
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "HFFCPatcher.esp")
                .AddRunnabilityCheck(state => { 
                    state.LoadOrder.AssertListsMod(ModKey.FromNameAndExtension("Horses Flee From Combat.esp"));  
                })
                .Run(args);
        }

        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var basePlugin = state.LoadOrder.GetIfEnabledAndExists("Horses Flee From Combat.esp");
            var horseFleeList = basePlugin.FormLists.First();

            var Skyrim = state.LoadOrder.GetIfEnabledAndExists("Skyrim.esm");
            var horseRaceList = new List<IRaceGetter>();
            var horseRace = Skyrim.Races.Where(x => x.FormKey.ID == 0x131FD).First();
            horseRaceList.Add(horseRace);

            // Add horses from Republic of Maslea
            state.LoadOrder.TryGetIfEnabledAndExists("Maslea.esm", out var Maslea);
            if (Maslea != null)
            {
                var masleaHorseRace1 = Maslea.Races.Where(x => x.FormKey.ID == 0x62EDB).First();
                var masleaHorseRace2 = Maslea.Races.Where(x => x.FormKey.ID == 0x63C4B).First();
                horseRaceList.Add(masleaHorseRace1);
                horseRaceList.Add(masleaHorseRace2);
            }

            // Beyond Skyrim: Bruma
            state.LoadOrder.TryGetIfEnabledAndExists("BSHeartland.esm", out var Bruma);
            if (Bruma != null)
            {
                var brumaHorseRace = Bruma.Races.Where(x => x.FormKey.ID == 0xAE5AF).First();
                horseRaceList.Add(brumaHorseRace);
            }

            // Khajiit Caravan Mules
            state.LoadOrder.TryGetIfEnabledAndExists("Khajiit Caravan Mules.esp", out var CaravanMules);
            if (CaravanMules != null)
            {
                var caravanMuleRace = CaravanMules.Races.Where(x => x.FormKey.ID == 0xD64).First();
                horseRaceList.Add(caravanMuleRace);
            }

            var blacklist = String.Join(",", Settings.Blacklist).Split(',').Select(x => x.Trim());
            var winningOverrides = state.LoadOrder.PriorityOrder.WinningOverrides<INpcGetter>();

            Console.WriteLine("Blacklisted records:");

            foreach (var npc in winningOverrides)
            { 
                if (!horseRaceList.Where(x => x.Equals(npc.Race)).Any()) { continue; }
                if (!npc.Template.IsNull && npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.AIData) 
                    && npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.DefPackList)) { continue; }

                if (blacklist.Contains(npc.EditorID, StringComparer.OrdinalIgnoreCase)
                    || npc.Name != null && blacklist.Intersect(npc.Name.Select(x => x.Value)).Any()) 
                { 
                    Console.WriteLine($"EditorID: {npc.EditorID}, Name: {npc.Name}, {npc.FormKey.ID:X8}~{npc.FormKey.ModKey.FileName}");
                    continue; 
                }
                var patchNPC = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                patchNPC.AIData.Aggression = 0;
                patchNPC.AIData.Assistance = 0;
                patchNPC.AIData.Confidence = 0;
                patchNPC.SpectatorOverridePackageList.SetTo(horseFleeList);
                patchNPC.CombatOverridePackageList.SetTo(horseFleeList);
            }
        }
    }
}
